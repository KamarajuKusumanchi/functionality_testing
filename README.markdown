==== Functionality testing of python scripts ====

The idea here is to make sure that a python script always returns the same output for a given set of inputs.
This is usually called 'regression testing' and is a bit different from 'unit testing'.
Unit testing focuses on testing individual functions inside the code,
but regression testing tries to catch any regressions from an end user perspective.

Consider for example

<ul><pre>
$ ls -R
.:
add_weeks.py*  tests/

./tests:
1.txt  2.txt  3.txt  4.txt  functionality_testing_template.txt  test_add_weeks.py  test_defs.json
</pre></ul>

where 1.txt, 2.txt, 3.txt and 4.txt are output files generated by running add_week.py with different inputs.
<ul><pre>
$ python add_weeks.py 20170903 -17 > 1.txt
$ python add_weeks.py 20170903 0 -17 -12 -12 > 2.txt
$ python add_weeks.py 2017-09-03 -17 > 3.txt
$ python add_weeks.py 2017-09-03 0 -17 -12 -12 > 4.txt
</pre></ul>

Now if add_weeks.py were to change in the future, we want to make sure that its output remains the same.
This is achieved by running the commands themselves as unit tests.

<ul><pre>
$python -m unittest discover tests
..
----------------------------------------------------------------------
Ran 2 tests in 16.173s

OK
testing:  ['python', 'add_weeks.py', '20170903', '-17']
testing:  ['python', 'add_weeks.py', '20170903', '0', '-17', '-12', '-12']
testing:  ['python', 'add_weeks.py', '2017-09-03', '-17']
testing:  ['python', 'add_weeks.py', '2017-09-03', '0', '-17', '-12', '-12']
</pre></ul>
